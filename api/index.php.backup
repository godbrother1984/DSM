<?php
/*
=============================================================================
DIGITAL SIGNAGE SYSTEM - ENHANCED API ROUTER
=============================================================================
Auto-generated by fix script
=============================================================================
*/

// Error reporting
error_reporting(E_ALL);
ini_set("display_errors", 0);
ini_set("log_errors", 1);

// Start output buffering
ob_start();

// Set timezone
date_default_timezone_set("Asia/Bangkok");

// CORS Headers
header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS");
header("Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With, X-Device-ID, X-API-Key");
header("Access-Control-Allow-Credentials: true");
header("Access-Control-Max-Age: 86400");

// Handle preflight OPTIONS request
if ($_SERVER["REQUEST_METHOD"] === "OPTIONS") {
    http_response_code(200);
    ob_end_clean();
    exit;
}

// Set content type
header("Content-Type: application/json");

// ===============================================================
// Fallback Classes - ใช้เมื่อไฟล์หลักไม่มี
// ===============================================================

if (!class_exists("ApiResponse")) {
    class ApiResponse {
        public static function success($data = null, $message = "Success", $statusCode = 200) {
            self::respond(true, $message, $data, $statusCode);
        }
        
        public static function error($message = "Error", $statusCode = 400, $details = null) {
            self::respond(false, $message, $details, $statusCode);
        }
        
        public static function unauthorized($message = "Authentication required") {
            self::error($message, 401);
        }
        
        public static function forbidden($message = "Access forbidden") {
            self::error($message, 403);
        }
        
        public static function notFound($message = "Resource not found") {
            self::error($message, 404);
        }
        
        public static function methodNotAllowed($message = "Method not allowed") {
            self::error($message, 405);
        }
        
        public static function validationError($errors, $message = "Validation failed") {
            self::error($message, 422, ["validation_errors" => $errors]);
        }
        
        public static function serverError($message = "Internal server error") {
            self::error($message, 500);
        }
        
        public static function created($data = null, $message = "Created") {
            self::success($data, $message, 201);
        }
        
        public static function paginated($data, $pagination, $message = "Success") {
            self::respond(true, $message, $data, 200, $pagination);
        }
        
        private static function respond($success, $message, $data = null, $statusCode = 200, $pagination = null) {
            ob_clean();
            http_response_code($statusCode);
            
            $response = [
                "success" => $success,
                "message" => $message,
                "timestamp" => date("c"),
                "status_code" => $statusCode
            ];
            
            if ($data !== null) {
                $response["data"] = $data;
            }
            
            if ($pagination !== null) {
                $response["pagination"] = $pagination;
            }
            
            echo json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);
            ob_end_flush();
            exit;
        }
    }
}

if (!class_exists("Database")) {
    class Database {
        private static $instance = null;
        private $connected = false;
        
        public static function getInstance() {
            if (self::$instance === null) {
                self::$instance = new self();
            }
            return self::$instance;
        }
        
        public function fetchOne($sql, $params = []) {
            if (!$this->connected) {
                throw new Exception("Database not connected");
            }
            return null;
        }
        
        public function fetchAll($sql, $params = []) {
            if (!$this->connected) {
                throw new Exception("Database not connected");
            }
            return [];
        }
        
        public function insert($table, $data) {
            if (!$this->connected) {
                throw new Exception("Database not connected");
            }
            return 1; // Mock ID
        }
        
        public function update($table, $data, $where, $params = []) {
            if (!$this->connected) {
                throw new Exception("Database not connected");
            }
            return 1; // Mock affected rows
        }
        
        public function delete($table, $where, $params = []) {
            if (!$this->connected) {
                throw new Exception("Database not connected");
            }
            return 1; // Mock affected rows
        }
    }
}

if (!class_exists("Auth")) {
    class Auth {
        public function isLoggedIn() {
            session_start();
            return isset($_SESSION["demo_user"]);
        }
        
        public function getCurrentUser() {
            session_start();
            return $_SESSION["demo_user"] ?? null;
        }
        
        public function validateApiToken($token) {
            $demoTokens = [
                "demo-admin-token" => [
                    "id" => 1,
                    "name" => "Demo Admin",
                    "email" => "admin@demo.local",
                    "role" => "admin"
                ]
            ];
            
            return $demoTokens[$token] ?? false;
        }
        
        public function hasPermission($permission) {
            $user = $this->getCurrentUser();
            return $user && in_array($user["role"], ["admin", "manager"]);
        }
        
        public function login($email, $password) {
            if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
                session_start();
                $_SESSION["demo_user"] = [
                    "id" => 1,
                    "name" => "Demo User",
                    "email" => $email,
                    "role" => "admin"
                ];
                return $_SESSION["demo_user"];
            }
            return false;
        }
        
        public function logout() {
            session_start();
            session_destroy();
            return true;
        }
    }
}

if (!class_exists("Helpers")) {
    class Helpers {
        public static function validate($data, $rules) {
            $errors = [];
            foreach ($rules as $field => $rule) {
                $value = $data[$field] ?? null;
                $ruleArray = explode("|", $rule);
                
                foreach ($ruleArray as $singleRule) {
                    if ($singleRule === "required" && empty($value)) {
                        $errors[$field][] = ucfirst($field) . " is required";
                    } elseif ($singleRule === "email" && !empty($value) && !filter_var($value, FILTER_VALIDATE_EMAIL)) {
                        $errors[$field][] = ucfirst($field) . " must be valid email";
                    }
                }
            }
            return $errors;
        }
        
        public static function sanitize($input) {
            return is_string($input) ? htmlspecialchars(strip_tags(trim($input)), ENT_QUOTES, "UTF-8") : $input;
        }
        
        public static function logActivity($message, $level = "info", $context = []) {
            $logFile = "../logs/api.log";
            $logDir = dirname($logFile);
            if (!is_dir($logDir)) {
                mkdir($logDir, 0755, true);
            }
            $timestamp = date("Y-m-d H:i:s");
            $logEntry = "[{$timestamp}] {$level}: {$message}" . PHP_EOL;
            file_put_contents($logFile, $logEntry, FILE_APPEND | LOCK_EX);
        }
    }
}

// ===============================================================
// Load Real Classes if Available
// ===============================================================

$systemReady = true;
$loadedClasses = [];

// Try to load real classes
$classFiles = [
    "../includes/database.php" => "Database",
    "../includes/auth.php" => "Auth",
    "../includes/Helpers.php" => "Helpers",
    "../includes/ApiResponse.php" => "ApiResponse"
];

foreach ($classFiles as $file => $className) {
    if (file_exists($file)) {
        try {
            require_once $file;
            $loadedClasses[] = $className;
        } catch (Exception $e) {
            error_log("Failed to load {$file}: " . $e->getMessage());
        }
    }
}

// ===============================================================
// Request Processing
// ===============================================================

$method = $_SERVER["REQUEST_METHOD"];
$requestUri = $_SERVER["REQUEST_URI"];

// Parse path
$scriptName = $_SERVER["SCRIPT_NAME"];
$basePath = dirname($scriptName);
$path = substr($requestUri, strlen($basePath));
$path = strtok($path, "?");
$path = trim($path, "/");

// Parse path segments
$segments = array_filter(explode("/", $path));
$resource = $segments[0] ?? "";
$id = $segments[1] ?? "";
$action = $segments[2] ?? "";

// Get input data
$input = [];
if (in_array($method, ["POST", "PUT", "PATCH"])) {
    $contentType = $_SERVER["CONTENT_TYPE"] ?? "";
    
    if (strpos($contentType, "application/json") !== false) {
        $rawInput = file_get_contents("php://input");
        $input = json_decode($rawInput, true) ?? [];
    } else {
        $input = $_POST;
    }
}

// Get query parameters
$query = $_GET;

// Initialize auth and user
try {
    $auth = new Auth();
    $user = null;
} catch (Exception $e) {
    $auth = null;
    $user = null;
}

// Define public endpoints
$publicEndpoints = [
    "",
    "system/health",
    "system/info",
    "player/register",
    "player/heartbeat",
    "player/playlist",
    "player/config",
    "auth/login"
];

$currentEndpoint = $resource . ($action ? "/" . $action : "");
$isPublicEndpoint = in_array($currentEndpoint, $publicEndpoints);

// Check authentication for protected endpoints
if (!$isPublicEndpoint && $auth) {
    $authHeader = $_SERVER["HTTP_AUTHORIZATION"] ?? "";
    $apiKey = $_SERVER["HTTP_X_API_KEY"] ?? "";
    
    if ($authHeader && strpos($authHeader, "Bearer ") === 0) {
        $token = substr($authHeader, 7);
        $tokenData = $auth->validateApiToken($token);
        if ($tokenData) {
            $user = $tokenData;
        }
    } elseif ($apiKey) {
        $tokenData = $auth->validateApiToken($apiKey);
        if ($tokenData) {
            $user = $tokenData;
        }
    } elseif ($auth->isLoggedIn()) {
        $user = $auth->getCurrentUser();
    }
    
    if (!$user) {
        ApiResponse::unauthorized("Authentication required for: " . $currentEndpoint);
    }
}

// Make variables global for endpoint files
$GLOBALS["method"] = $method;
$GLOBALS["id"] = $id;
$GLOBALS["action"] = $action;
$GLOBALS["input"] = $input;
$GLOBALS["query"] = $query;
$GLOBALS["auth"] = $auth;
$GLOBALS["user"] = $user;

// ===============================================================
// Route to Endpoints
// ===============================================================

try {
    switch ($resource) {
        case "":
            // API root
            ApiResponse::success([
                "name" => "Digital Signage API",
                "version" => "1.0.0",
                "status" => "operational",
                "mode" => count($loadedClasses) === 4 ? "full" : "fallback",
                "loaded_classes" => $loadedClasses,
                "timestamp" => date("c"),
                "endpoints" => [
                    "auth" => "/api/auth",
                    "content" => "/api/content",
                    "playlist" => "/api/playlist",
                    "device" => "/api/device",
                    "player" => "/api/player",
                    "system" => "/api/system"
                ]
            ], "Digital Signage API Ready");
            break;

        case "system":
            if ($action === "health") {
                $checks = [
                    "php" => ["status" => "ok", "version" => PHP_VERSION],
                    "classes" => ["status" => "ok", "loaded" => count($loadedClasses)],
                    "files" => ["status" => is_writable("../uploads") ? "ok" : "warning"]
                ];
                
                ApiResponse::success([
                    "status" => "healthy",
                    "timestamp" => date("c"),
                    "checks" => $checks
                ], "System health check");
            } else {
                include_once "system.php";
            }
            break;

        case "auth":
            if (file_exists("auth.php")) {
                include "auth.php";
            } else {
                // Fallback auth handler
                if ($method === "POST" && $action === "login") {
                    $email = $input["email"] ?? "";
                    $password = $input["password"] ?? "";
                    
                    if ($auth && $auth->login($email, $password)) {
                        ApiResponse::success([
                            "user" => $auth->getCurrentUser(),
                            "token" => "demo-admin-token"
                        ], "Login successful");
                    } else {
                        ApiResponse::error("Invalid credentials", 401);
                    }
                } else {
                    ApiResponse::notFound("Auth endpoint not implemented");
                }
            }
            break;

        case "content":
            if (file_exists("content.php")) {
                include "content.php";
            } else {
                ApiResponse::success([
                    ["id" => 1, "title" => "Demo Content", "type" => "image"]
                ], "Demo content list");
            }
            break;

        case "playlist":
            if (file_exists("playlist.php")) {
                include "playlist.php";
            } else {
                ApiResponse::success([
                    ["id" => 1, "name" => "Demo Playlist", "item_count" => 1]
                ], "Demo playlist list");
            }
            break;

        case "device":
            if (file_exists("device.php")) {
                include "device.php";
            } else {
                ApiResponse::success([
                    ["id" => 1, "name" => "Demo Device", "status" => "online"]
                ], "Demo device list");
            }
            break;

        case "player":
            if (file_exists("player.php")) {
                include "player.php";
            } else {
                if ($method === "POST" && $action === "register") {
                    ApiResponse::success([
                        "device" => [
                            "id" => rand(100, 999),
                            "device_id" => $input["device_id"] ?? "demo-" . uniqid(),
                            "name" => $input["name"] ?? "Demo Device"
                        ]
                    ], "Device registered (demo)");
                } else {
                    ApiResponse::success(["playlist" => null], "No playlist assigned");
                }
            }
            break;

        case "user":
            if (file_exists("user.php")) {
                include "user.php";
            } else {
                ApiResponse::success([
                    ["id" => 1, "name" => "Demo User", "email" => "demo@local"]
                ], "Demo user list");
            }
            break;

        case "layout":
            if (file_exists("layout.php")) {
                include "layout.php";
            } else {
                ApiResponse::success([
                    ["id" => 1, "name" => "Fullscreen Layout", "type" => "fullscreen"]
                ], "Demo layout list");
            }
            break;

        default:
            ApiResponse::notFound("Endpoint not found: " . $resource);
            break;
    }

} catch (Exception $e) {
    error_log("API Error: " . $e->getMessage());
    ApiResponse::serverError("An error occurred: " . $e->getMessage());
}

ob_end_clean();
?>